package com.amdocs.digital.ms.shoppingcart.checkout.testpact;

import java.lang.reflect.InvocationTargetException;

import javax.inject.Inject;

import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;

import com.amdocs.digital.ms.shoppingcart.checkout.testpact.PactFileMerger;

import au.com.dius.pact.consumer.Pact;
import au.com.dius.pact.consumer.PactProviderRuleMk2;
import au.com.dius.pact.consumer.PactVerification;
import au.com.dius.pact.consumer.dsl.PactDslWithProvider;
import au.com.dius.pact.model.RequestResponsePact;
import feign.Feign;


@RunWith(SpringRunner.class)
// Instruction
// Uncomment the following when Provider2's client is gnerated by swagger.
//@ContextConfiguration(classes={Feign.Builder.class, Provider2ApiConfig.class})
// Instruction
// 1. Look inside Provider2ApiConfig.java for the correct spelling of "services.provider2.url" 
@TestPropertySource(properties = "services.provider2.url=http://127.0.0.1:8888/provider2-management")
public class ThisService_Provider2_PactGenTest extends PactFileMerger 
{
	public static final String CONSUMER = "Checkout";
	public static final String PROVIDER = "Provider2";
	
    @Rule
    public PactProviderRuleMk2 rule = new PactProviderRuleMk2(PROVIDER, "127.0.0.1", 8888, this);
    
// Instruction:
// Once the Provider1's client is generated by swagger, uncomment this line
//    @Injec
//    Provider1Api client;
	
	@BeforeClass
	public static void init() throws InstantiationException, IllegalAccessException
	{
		PACKAGE_OF_PACTS_TO_MERGE = "com.amdocs.digital.ms.shoppingcart.checkout.testpact.doNotPublish";
		PactFileMerger.init();
	}
    
    @Pact(provider=PROVIDER, consumer=CONSUMER)
    public RequestResponsePact RequestResponsePact(PactDslWithProvider builder) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException
    {
    	return super.createFragment(builder);
     }

 	@Test
    @PactVerification( PROVIDER)
    public void runTest( ) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {
 		super.runTest();
 	}
}
