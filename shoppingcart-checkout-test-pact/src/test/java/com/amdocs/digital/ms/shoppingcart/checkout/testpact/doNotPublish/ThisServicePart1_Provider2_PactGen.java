package com.amdocs.digital.ms.shoppingcart.checkout.testpact.doNotPublish;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.mock.http.MockHttpOutputMessage;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestTemplate;

import au.com.dius.pact.consumer.Pact;
import au.com.dius.pact.consumer.PactProviderRuleMk2;
import au.com.dius.pact.consumer.PactVerification;
import au.com.dius.pact.consumer.dsl.DslPart;
import au.com.dius.pact.consumer.dsl.PactDslJsonBody;
import au.com.dius.pact.consumer.dsl.PactDslWithProvider;
import au.com.dius.pact.model.RequestResponsePact;
import feign.Feign;

@RunWith(SpringRunner.class)
// Instruction
// Uncomment the following when Provider2's client is gnerated by swagger.
//@ContextConfiguration(classes={Feign.Builder.class, Provider2ApiConfig.class})
// Instruction
// 1. Look inside Provider2ApiConfig.java for the correct spelling of "services.provider2.url" 
@TestPropertySource(properties = "services.provider2.url=http://127.0.0.1:8888/provider2-management")
public class ThisServicePart1_Provider2_PactGen 
{
	public static final String CONSUMER = "Checkout" + "Part1";
	public static final String PROVIDER = "Provider1";

	static String defaultPactRootDir; 
	
	@BeforeClass
	public static void setup() {
		// Generate the pact in an alternative directory to avoid publishing
		defaultPactRootDir = System.setProperty( "pact.rootDir", "target/pacts-do-not-publish");
	}

	@AfterClass
	public static void teardown() {
		// Restore the default pact.rootDir
		if( defaultPactRootDir == null)
		{
			System.clearProperty( "pact.rootDir");
		}
		else
		{
			System.setProperty( "pact.rootDir", defaultPactRootDir);
		}
	}

    @Rule
    public PactProviderRuleMk2 rule = new PactProviderRuleMk2(PROVIDER, "127.0.0.1", 8888, this);
    
// Instruction:
// Once the Provider1's client is generated by swagger, uncomment this line
//    @Inject
//    Provider1Api client;
    
    @Pact(provider=PROVIDER, consumer=CONSUMER)
    public RequestResponsePact createFragment(PactDslWithProvider builder) {
    	Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json;charset=UTF-8");
		return builder
                // GET "ShoppingCartById?id=1"
        		.uponReceiving("fetch shopping cart by id")
                .path(path)
                .method("GET")
                .query("id=1")
                .willRespondWith()
                .status(200)
                .headers(headers)
                .body( "{}")
                .toPact();
    }
	String path = "/dummyPath";
	 
	@Test
	@PactVerification(PROVIDER)
	public void runTest() {
		RestTemplate restTemplate = new RestTemplate();
        String url = "http://127.0.0.1:8888";
        String resp = restTemplate.getForObject(url + path + "?id={id}", String.class, 1);
    }

}
